(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{370:function(t,s,a){t.exports=a.p+"assets/img/01.ab22e120.png"},371:function(t,s,a){t.exports=a.p+"assets/img/02.97b71aa9.png"},499:function(t,s,a){"use strict";a.r(s);var e=a(27),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一-基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-基础"}},[t._v("#")]),t._v(" 一. 基础")]),t._v(" "),e("ol",[e("li",[t._v("定义：")])]),t._v(" "),e("ul",[e("li",[t._v("链表通常由一连串节点（“链结点”）组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（“links”）。")]),t._v(" "),e("li",[t._v("链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。")]),t._v(" "),e("li",[t._v("链表包含了单链表，双向链表，单项循环链表，双向循环链表在磁盘中的存储不是一段连续的地址空间，而是分开存储的。\n"),e("ul",[e("li",[t._v("单链表只记叙了数据（Date）和下一个节点（next）的存储位置。")]),t._v(" "),e("li",[t._v("双向链表（Double Linked List）在数据的前后，分别给出了前一个数据节点的存储位置和后一个数据节点的存储位置。")]),t._v(" "),e("li",[t._v("单向循环链表（Circular Linked List）和双向链表基本相同，不同的是，在循环链表中的开始节点的前一个数据节点指向最后一个数据节点的存储位置，最后一个数据节点的下一个数据节点指向开始节点的存储位置。")]),t._v(" "),e("li",[t._v("双向循环链表 [Double Circular Linked List] : 由各个内存结构通过指针 Next 和指针 Prev 链接在一起组成，每一个内存结构都存在前驱内存结构和后继内存结构，内存结构由数据域、Prev 指针域和 Next 指针域组成。")]),t._v(" "),e("li",[t._v("链表的插入删除效率非常高，在插入元素时，只需要将插入位置的前一个节点的位置指向，赋值为插入的数据的位置，然后将插入数据的下一个节点指向后一个数据的存储位置即可。删除时，只需要修改删除位置的前后节点指向即可，将前一个节点的指向修改为要删除元素的后一个节点的存储位置。如果是双向链表，再将删除节点的后一个节点的指向修改为删除元素之前的节点的存储位置。")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:a(370),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"二-刷题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-刷题"}},[t._v("#")]),t._v(" 二. 刷题")]),t._v(" "),e("p",[e("strong",[t._v("多画图")])]),t._v(" "),e("ol",[e("li",[t._v("在链表刷题中，有一些常见的命名")])]),t._v(" "),e("p",[t._v("cur：当前节点指针")]),t._v(" "),e("p",[t._v("pre,rear：前后节点指针")]),t._v(" "),e("p",[t._v("fast,slow：快慢指针")]),t._v(" "),e("p",[t._v("next：指向下一个"),e("strong",[t._v("节点")]),t._v("的指针域")]),t._v(" "),e("p",[t._v("head,tail：头尾节点指针")]),t._v(" "),e("p",[t._v("dummy：哨兵、虚拟头结点")]),t._v(" "),e("p",[t._v("val：值")]),t._v(" "),e("p",[t._v("ListNode: 链表节点")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("技巧点\n（1）基本：找到递归结束条件，找到递归的式子")])]),t._v(" "),e("li",[e("p",[t._v("看文章\n链表原来如斯简单：https://www.pzijun.cn/algorithms/list/1.html#%E5%BC%95%E8%A8%80")])])]),t._v(" "),e("p",[t._v("（1）删除链表倒数第 n 个结点\n走了 n 步：从头结点开始算一步")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("看清楚题目要求返回的数据；输出该节点与输出头结点的不同操作")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//比如，要求返回的是ListNode")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @param {ListNode} head\n * @return {ListNode}\n */")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("head\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\nnode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cur\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输入该节点")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//输出头结点")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br")])]),e("h2",{attrs:{id:"三-头指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-头指针"}},[t._v("#")]),t._v(" 三. 头指针")]),t._v(" "),e("h3",{attrs:{id:"_1-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义"}},[t._v("#")]),t._v(" 1. 定义")]),t._v(" "),e("p",[t._v("辨析线性表的插入删除需要移动大量的元素，因此引入链表（本文讨论单链表）的概念，链表元素之间通过“链”来链接，因此插入和删除时不需要大量的移动元素，而只需要改变“链”的关系即可。头指针：通常使用“头指针”来标识一个链表，如单链表 L，头指针为 NULL 的时表示一个空链表。链表非空时，头指针指向的是第一个结点的存储位置。头结点：在单链表的第一个结点之前附加一个结点，称为头结点。头结点的 Data 域可以不设任何信息，也可以记录表长等相关信息。若链表是带有头结点的，则头指针指向头结点的存储位置。[注意]无论是否有头结点，头指针始终指向链表的第一个结点。如果有头结点，头指针就指向头结点。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(371),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_2-引入头结点的优势优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-引入头结点的优势优势"}},[t._v("#")]),t._v(" 2. 引入头结点的优势优势")]),t._v(" "),e("p",[e("strong",[t._v("优势 1:第 1 个位置的插入、删除更加方便，带来操作上的统一")])]),t._v(" "),e("p",[t._v("(1)插入")]),t._v(" "),e("p",[e("strong",[t._v("带头结点：")])]),t._v(" "),e("p",[t._v("例如：head 为头指针，x 待插入(后插方式)的新结点，p 为指向任意结点的指针。")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p = head;")]),t._v("\nx"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhead"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//插入其他结点")]),t._v("\nx"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("若令 p=head，则带有头结点的链表，可以实现代码复用，减少分支。")]),t._v(" "),e("p",[e("strong",[t._v("不带头结点：")])]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("x"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nhead "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//插入其他结点")]),t._v("\nx"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])]),e("p",[t._v("因此，不带头结点的链表，插入第一个结点时，需要特殊处理，删除操作类似。")]),t._v(" "),e("p",[t._v("（2）删除")]),t._v(" "),e("p",[e("strong",[t._v("带头结点：")])]),t._v(" "),e("ul",[e("li",[t._v("p 指向要删除结点的前驱结点，若要删除的结点为第 1 个位置，则其前驱结点就是头结点，此时 p 指向头结点。")]),t._v(" "),e("li",[t._v("让临时指针 q 指向要删除的结点，即 q = p—>next；")]),t._v(" "),e("li",[t._v("让 p 的 next 指向要删除结点的下一个结点，即 p—>next = q—>next；")]),t._v(" "),e("li",[t._v("释放 q 的空间，即 free(q);")])]),t._v(" "),e("p",[e("strong",[t._v("不带头结点：")])]),t._v(" "),e("ul",[e("li",[t._v("判断要删除的是否是第 1 个位置，若是需要特殊处理。")]),t._v(" "),e("li",[t._v("若是第 1 个位置，让 s 指向要删除的结点。首先判断 PtrL 是否为空，若是直接 return NULL;若不为空，则将链表的头结点挪到下一个位置，即 PtrL = PtrL—>next；")]),t._v(" "),e("li",[t._v("free(s);然后 return PtrL")]),t._v(" "),e("li",[t._v("若不是第 1 个位置，首先找到要删除结点的前驱结点，让 p 指向这个前驱结点。")]),t._v(" "),e("li",[t._v("让临时指针 q 指向要删除的结点，即 q = p—>next；")]),t._v(" "),e("li",[t._v("让 p 的 next 指向要删除结点的下一个结点，即 p—>next = q—>next；")]),t._v(" "),e("li",[t._v("释放 q 的空间，即 free(q);")]),t._v(" "),e("li",[t._v("return PtrL")])]),t._v(" "),e("p",[e("strong",[t._v("优势 2:统一空表和非空表的处理")])]),t._v(" "),e("p",[t._v("若使用头结点，无论表是否为空，头指针都指向头结点，也就是"),e("code",[t._v("*LNode类型")]),t._v("，对于空表和非空表的操作是一致的。")]),t._v(" "),e("p",[t._v("若不使用头结点，当表非空时，头指针指向第 1 个结点的地址，即"),e("code",[t._v("*LNode类型")]),t._v("，但是对于空表，头指针指向的是 NULL，此时空表和非空表的操作是不一致的。所以单链表一般为带头结点的单链表。")]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("p",[t._v("[1] http://t.csdn.cn/hzA1D")]),t._v(" "),e("p",[t._v("[2] https://leetcode-cn.com/circle/article/3lwAea/")]),t._v(" "),e("p",[t._v("[3] https://www.pzijun.cn/algorithms/list/1.html#%E5%BC%95%E8%A8%80")])])}),[],!1,null,null,null);s.default=r.exports}}]);